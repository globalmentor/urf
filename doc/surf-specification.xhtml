<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html lang="en-US" xmlns="http://www.w3.org/1999/xhtml">

<head>
	<meta charset="UTF-8" />
	<meta name="author" content="Garret Wilson" />
	<title>Simple URF (SURF) Specification</title>
	<link type="text/css" rel="stylesheet" href="../../pub/css/globalmentor-doc.css" />
</head>

<body>
	<header>
		<h1>Simple URF (SURF) Specification</h1>
		<aside class="important far side">Draft version.</aside>
		<dl>
			<dt>Author</dt>
			<dd><a href="http://www.garretwilson.com/">Garret Wilson</a> (<a href="http://www.globalmentor.com/">GlobalMentor, Inc.</a>)</dd>
			<dt>Version</dt>
			<dd>Draft 2017-06-17</dd>
		</dl>
	</header>
	<h2>Introduction</h2>
	<p><dfn>Simple URF</dfn> (<abbr>SURF</abbr>) is a compact, text-based, human-readable persistence format for a directed graph of data values. It is similar in purpose to JSON yet less verbose and more expressive, supporting for example a greater number of types. Moreover as one of the primary serializations (along with <abbr title="Text URF">TURF</abbr>) of the <dfn>Uniform Resource Format</dfn> (<abbr>URF</abbr>), it is compatible with rigorous semantic frameworks such as the <dfn>Resource Description Framework</dfn> (<abbr>RDF</abbr>).</p>
	<h3>Definitions</h3>
	<dl>
		<dt>SURF parser</dt>
		<dd>Any software component that interprets SURF syntax and produces an appropriate data model according to this specification.</dd>
		<dt>SURF serializer</dt>
		<dd>An software that produces SURF syntax complying with this specification to reflect some data model.</dd>
	</dl>
	<h3>Design Constraints</h3>
	<p><em>This section is non-normative.</em></p>
	<p>The following considerations were used to guide the creation of this specification:</p>
	<ul>
		<li>SURF <span class="spec-must">must</span> support the Unicode character set for text values.</li>
		<li>SURF <span class="spec-should">should</span> support the Unicode character set for identifiers and comments.</li>
		<li>SURF <span class="spec-must">must</span> use only ASCII characters for delimiters.</li>
		<li>All valid JSON documents <span class="spec-must">must</span> also be valid SURF documents.</li>
		<li>All valid SURF documents <span class="spec-must">must</span> also be valid TURF documents.</li>
		<li>SURF <span class="spec-must">must</span> allow for distinctions among vocabularies of identifiers.</li>
		<li>SURF <span class="spec-must-not">must not</span> require namespace IRIs to be declared.</li>
	</ul>
	<h3>Conventions Used in this Document</h3>
	<p>The key words <q><span class="spec-must">must</span></q>, <q><span class="spec-must-not">must not</span></q>, <q><span class="spec-must">required</span></q>, <q><span class="spec-must">shall</span></q>, <q><span class="spec-must-not">shall not</span></q>, <q><span class="spec-should">should</span></q>, <q><span class="spec-should-not">should not</span></q>, <q><span class="spec-should">recommended</span></q>, <q><span class="spec-may">may</span></q>, and <q><span class="spec-may">optional</span></q> in this document are to be interpreted as described in <a href="#ref-rfc2119" class="ref">RFC 2119</a>. Parts of this specification marked as <span class="note">notes</span> and <span class="annotation">annotations</span> are non-normative.</p>
	<h2>Internet Media Type</h2>
	<aside class="note far third">The separate TURF format allows other encodings such as UTF-16 and UTF-32.</aside>
	<p>The Internet media type (<a href="#ref-rfc2046" class="ref">RFC 2046</a>, <a href="#ref-rfc6657" class="ref">RFC 6657</a>) of a SURF document <span class="spec-must">shall</span> be <code>text/surf</code> and <span class="spec-must">must</span> be encoded in UTF-8. A SURF document <span class="spec-must-not">must not</span> begin with a so-called byte order mark (<abbr>BOM</abbr>) or UTF-8 signature.</p>
	<h2>Structure</h2>
	<p>The content of a SURF document encodes a a graph of <dfn>resources</dfn> defined by the Uniform Resource Framework (URF) with a single resource as the root of the graph. A SURF document <span class="spec-may">may</span> be empty, representing no resources. A SURF parser or a SURF serializer <span class="spec-may">may</span> represent a SURF document as a graph of URF resources. Nevertheless, although SURF syntax maintains compliance with the URF model, the implementation and use of SURF does not require use of the URF model.</p>
	<h3>Whitespace</h3>
	<aside class="note far third">SURF follows the <cite>ECMAScript® 2016</cite> definition of <q>WhiteSpace</q>. <span class="see">See <a href="http://www.ecma-international.org/ecma-262/7.0/#sec-white-space"><cite>ECMA-262 7<sup>th</sup> Edition: 11.2 White Space</cite></a>.</span></aside>
	<p>SURF consider the following characters as <dfn>whitespace</dfn>, including characters in the Unicode <code class="name">Space_Separator</code> (<code>Zs</code>) category.</p>
	<ul>
		<li><code class="name">whitespace</code> ⇒ <code class="name">tab</code> | <code class="name">vtab</code> | <code class="name">ff</code> | <code class="name">sp</code> | <code class="name">nbsp</code> | <code class="name">zwnbspr</code> | <code class="name">Space_Separator</code></li>
		<li><code class="name">tab</code> ⇒ <code class="name">CHARACTER TABULATION</code> (<code class="unicode">U+0009</code>)</li>
		<li><code class="name">vtab</code> ⇒ <code class="name">LINE TABULATION</code> (<code class="unicode">U+000B</code>)</li>
		<li><code class="name">ff</code> ⇒ <code class="name">FORM FEED (FF)</code> (<code class="unicode">U+000C</code>)</li>
		<li><code class="name">sp</code> ⇒ <code class="name">SPACE</code> (<code class="unicode">U+0020</code>)</li>
		<li><code class="name">nbsp</code> ⇒ <code class="name">NO-BREAK SPACE</code> (<code class="unicode">U+00A0</code>)</li>
		<li><code class="name">zwnbspr</code> ⇒ <code class="name">ZERO WIDTH NO-BREAK SPACE</code> (<code class="unicode">U+FEFF</code>)</li>
	</ul>
	<h3>Line Endings</h3>
	<p>SURF recognizes both the <code class="name">CARRIAGE RETURN (CR)</code> character (<code class="unicode">U+000D</code>), the <code class="name">LINE FEED (LF)</code> character (<code class="unicode">U+000A</code>), and any Unicode <code class="name">Line_Separator</code> (<code>Zl</code>) or <code class="name">Paragraph_Separator</code> (<code>Zp</code>) character as marking the end of a line. A SURF processor <span class="spec-must">must</span> behave as if every <code class="name">CRLF</code> sequence as well as every <code>CR</code> not followed by a <code class="name">LF</code> were normalized to a single <code class="name">LF</code>. A SURF serializer <span class="spec-should">should</span> use the conventional line ending sequence supported by the platform on which it is running if that sequence is allowed by this specification.</p>
	<ul>
		<li><code class="name">eol</code> ⇒ <code class="name">cr</code> | <code class="name">lf</code> | <code class="name">Line_Separator</code> | <code class="name">Paragraph_Separator</code></li>
		<li><code class="name">cr</code> ⇒ <code class="name">CARRIAGE RETURN (CR)</code> (<code class="unicode">U+000D</code>)</li>
		<li><code class="name">lf</code> ⇒ <code class="name">LINE FEED (LF)</code> (<code class="unicode">U+000A</code>)</li>
	</ul>
	<h3>Comments</h3>
	<h4>Line Comments</h4>
	<p>A line comment <span class="spec-may">may</span> appear before the end of any line. A line comment begins with the <code class="name">EXCLAMATION MARK</code> character <code>!</code> (<code class="unicode">U+0021</code>) and proceeds to the next line ending character.</p>
	<ul class="spec-production">
		<li><code class="name">line_comment</code> ⇒ '!' [^<code class="name">eol</code>]*</li>
	</ul>
	<h3>Filler</h3>
	<aside class="note far third">Most instances of filler appear between items in a <a href="#sequence">sequence</a>.</aside>
	<p>The comments and whitespace that <span class="spec-may">may</span> appear between some structures is referred to as <dfn>filler</dfn>, indicated in this specification using the <code class="name">MIDDLE DOT</code> character <code>·</code>.</p>
	<ul>
		<li>· ⇒ (<code class="name">whitespace</code> | <code class="name">line_comment</code>)*</li>
	</ul>
	<h3>Line Breaks</h3>
	<aside class="tip far third">A parser <span class="spec-may">may</span> simply discard line comments and parse the SURF document as if they were not present.</aside>
	<p>A <dfn>line break</dfn> is any end of line surrounded on either side by filler.</p>
	<ul class="spec-production">
		<li><code class="name">line_break</code> ⇒ · <code class="name">eol</code> ·</li>
	</ul>
	<h3 id="sequence">Sequences</h3>
	<p>Several SURF types allow components to be presented in a <dfn>sequence</dfn>. A sequence is a syntactical construct indicated by the form <code class="name"><var>item</var>-sequence</code>, where <code><var>item</var></code> is the construct that may appear zero or more times in the sequence.</p>
	<aside class="note far third">The sequence separator is a SURF innovation that allows sequences to be represented in compact form using commas in the JSON style, or in a more human-readable format separated by newlines in the YAML style.</aside>
	<p>Any two items in a sequence are separated by a <dfn>sequence separator</dfn>, which is either a <code class="name">COMMA</code> character <code>,</code> (<code class="unicode">U+002C</code>) optionally surrounded by line line breaks; or one or more line breaks without a <code class="name">COMMA</code> character. If a <code class="name">COMMA</code> character is present, an item <span class="spec-must">must</span> follow. <span class="note">This means that one or more line breaks <span class="spec-may">may</span> end a sequence or appear in an empty sequence.</span>
	</p>
	<ul class="spec-production">
		<li><code class="name">item-sequence</code> ⇒ <code class="name">line_break</code>* [ <code class="name">item</code> [ <code class="name">sequence_separator_must</code> <code class="name">item</code> | <code class="name">sequence_separator_may</code> <code class="name">item</code>? ]* ]</li>
		<li><code class="name">sequence_separator_must</code> ⇒ <code class="name">line_break</code>* ',' <code class="name">line_break</code>*</li>
		<li><code class="name">sequence_separator_may</code> ⇒ <code class="name">line_break</code>+</li>
	</ul>
	<h2>Names</h2>
	<figure class="far side">
		<figcaption>Example SURF names.</figcaption>
		<ul>
			<li><code class="language-surf">foo</code></li>
			<li><code class="language-surf">fooBar</code></li>
			<li><code class="language-surf">foo_bar</code></li>
			<li><code class="language-surf">touché</code></li>
			<li><code class="language-surf">काम</code></li>
			<li><code class="language-surf">chem-salt</code></li>
			<li><code class="language-surf">crypto-salt</code></li>
			<li><code class="language-surf">User</code></li>
			<li><code class="language-surf">chem-Molecule</code></li>
		</ul>
	</figure>
	<p>A <dfn>name</dfn> in SURF must begin with a character from the Unicode <code class="name">Letter</code> (<code>L</code>) category; followed by zero or more characters each from the <code class="name">Letter</code> (<code>L</code>) category, from the <code class="name">Mark</code> (<code>M</code>) category, from the <code class="name">Decimal_Number</code> (<code>Nd</code>) category, <code class="name">Connector_Punctuation</code> (<code>Pc</code>) category, or the <code class="name">HYPHEN-MINUS</code> character <code>-</code> (<code class="unicode">U+002D</code>). Two hyphen-minus characters <span class="spec-must-not">must not</span> may appear subsequently in a name, and a name <span class="spec-must-not">must not</span> end with a hyphen-minus character.</p>
	<ul class="spec-production">
		<li><code class="name">name</code> ⇒ <code class="name">Letter</code> (<code class="name">Letter</code> | <code class="name">Mark</code> | <code class="name">Decimal_Number</code> | <code class="name">Connector_Punctuation</code> | '-')*</li>
	</ul>
	<aside class="note far third">The separate TURF format allows defining custom namespaces, each with a hierarchy of name contexts.</aside>
	<aside class="annotation far half">The SURF name context delimiter <code>-</code> is meant to parallel that used by <a href="https://www.w3.org/TR/html5/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes"><cite class="see">HTML5 <code>data-*</code> attributes</cite></a>, that used by <a href="https://www.w3.org/TR/custom-elements/" class="see"><cite>HTML Custom Elements</cite></a>, as well as naming conventions such as used for npm packages and Maven artifacts. The SURF name context mechanism attempts to strike a balance between the complex, draconian URL associations of <a href="https://www.w3.org/TR/REC-xml-names/" class="see"><cite>Namespaces in XML 1.0</cite></a> and a lackadaisical, free-for-all identifier situation such as in JSON.</aside>
	<p>The sequence of Unicode code points in a name <span class="spec-should">should</span> follow <code class="name">Normalization Form C</code> (<code>NFC</code>) as per <a href="#ref-uax15" class="ref">UAX #15</a>.</p>
	<h5>Namespace</h5>
	<p>Every SURF name is part of the URF <dfn>namespace</dfn> identified by the IRI <code>https://urf.name/</code>.</p>
	<h5>Contexts</h5>
	<p>The components delimited by hyphen-minus characters, with the exception of the last component which is referred to as the <dfn>simple name</dfn>, represent a hierarchy of <dfn>name contexts</dfn>. The name <code>example-foo</code>, for example, indicates simple name of <code>foo</code> in the <code>example</code> name context. Nevertheless a SURF parser <span class="spec-may">may</span> treat SURF names as opaque identifiers.</p>
	<p>Authors of SURF documents <span class="spec-should">should</span> use name contexts corresponding to a reverse series of domain name components for a domain that author controls or has authority to use, either starting the the top-level domain or the second-level domain. The owner of the <code>example.com</code> domain, for example, might create a name <code>com-example-FooBar</code> or <code>example-FooBar</code>.</p>
	<p>SURF documents <span class="spec-must-not">must not</span> use names beginning with the <code>urf-</code> prefex unless defined by one of the URF specifications. The <code>example-</code> prefix is reserved for use as examples in documentation for private testing. There are no restrictions on using SURF identifiers with no context, although authors should <span class="spec-should">should</span> follow conventions that may develop associating semantics with certain names.</p>
	<h2>Resources</h2>
	<p>A SURF document <span class="spec-must">must</span> contain at most a single <dfn>resource</dfn>, which may recursively contain other resources. A resource consists of an optional <dfn>label</dfn> followed by a <dfn>resource representation</dfn>.</p>
	<ul class="spec-production">
		<li><code class="name">resource</code> ⇒ [<code class="name">label</code>] · <code class="name">resource_representation</code> | <code class="name">label</code></li>
		<li><code class="name">resource_representation</code> ⇒ <code class="name">object</code> | <code class="name">literal</code> | <code class="name">collection</code><code class="name"></code></li>
		<li><code class="name">literal</code> ⇒ <code class="name">binary</code> | <code class="name">boolean</code> | <code class="name">character</code> | <code class="name">email</code> | <code class="name">iri</code> | <code class="name">number</code> | <code class="name">regex</code> | <code class="name">string</code> | <code class="name">telephone</code> | <code class="name">temporal</code> | <code class="name">uuid</code><code class="name"></code></li>
		<li><code class="name">collection</code> ⇒ <code class="name">list</code> | <code class="name">map</code> | <code class="name">set</code> | <code class="name">table</code></li>
	</ul>
	<p> A label consists of an identifier, which is either a SURF name or an IRI, a surrounded by matching <code class="name">VERTICAL LINE</code> characters <code>|</code> (<code class="unicode">U+007C</code>). A label with a SURF name as its identifier is a <dfn>local label</dfn>, while a label with an IRI as its identifier is a <dfn>global label</dfn>.</p>
	<ul class="spec-production">
		<li><code class="name">label</code> ⇒ '|' <code class="name">label_identifier</code> '|'</li>
		<li><code class="name">label_identifier</code> ⇒ <code class="name">name</code> | <code class="name">iri</code></li>
	</ul>
	<p>The first occurrence of a label with a particular identifier <span class="spec-may">may</span> include a resource representation. Subsequent appearances of a label with the same identifier <span class="spec-must-not">must not</span> include a resource representation. A nested resource representation <span class="spec-may">may</span> refer to the label of an outer resource in the graph.</p>
	<p>A <em>local label</em> is merely part of the SURF document syntax, providing an identifier for referencing resources only within the confines of the SURF document. A <em>global label</em> <span class="spec-must">must</span> appear in front of an object resource representation, and provides an IRI identifier that remains associated with that object outside of the SUF document. A SURF parser <span class="spec-must">must</span> provide global identifiers as part of the parsed data.</p>
	<h3>Objects</h3>
	<p>Objects are descriptions of unidentified resources.</p>
	<ul class="spec-production">
		<li><code class="name">object</code> ⇒ <code class="name">object_begin</code> · [<code class="name">type</code>] · [<code class="name">properties</code>]</li>
		<li><code class="name">object_begin</code> ⇒ '*'</li>
		<li><code class="name">type</code> ⇒ <code class="name">name</code></li>
		<li><code class="name">properties</code> ⇒ ':' <code class="name">property-sequence</code> ';'</li>
		<li><code class="name">property</code> ⇒ <code class="name">name</code> <code class="name">line_break</code>* '=' <code class="name">line_break</code>* <code class="name">resource</code></li>
	</ul>
	<p>An <code class="name">eol</code> <span class="spec-must-not">must not</span> appear between an <code class="name">object_begin</code> and a <code class="name">type</code>, or between a <code class="name">type</code> and any following <code class="name">properties</code>. </p>
	<p>TODO recommend not to use "true" or "false" as property names, because the semantics in URF are different than expected</p>
	<p>An object <span class="spec-must-not">must not</span> contain more than one <code class="name">property</code> with the same <code class="name">name</code>, and a SURF processor <span class="spec-must">must</span> consider such a condition as a non-recoverable error.</p>
	<h3>Literals</h3>
	<aside class="info far third">Literals are a way to represent URF <dfn>lexical identity resources</dfn>, those resources that can be identified by a lexical representation. TURF provides other ways of representing these resources in addition to literals.</aside>
	<p>SURF <dfn>literals</dfn> are lexical representations of resources.</p>
	<h4>Binary</h4>
	<aside class="annotation far side">SURF uses the binary delimiter <code>%</code> because it resembles <code>0</code> and <code>1</code>.</aside>
	<p>URF allows the encoding of an arbitrary sequence of octets. Zero or more bytes <span class="spec-must">must</span> be encoded using the <q>Base 64 Encoding</q> defined in <a href="#ref-rfc4648" class="ref">RFC 4648</a>, beginning with the <code class="name">PERCENT SIGN</code> character <code>%</code> (<code class="unicode">U+0025</code>). The encoding <span class="spec-must-not">must not</span> include Base 64 padding.</p>
	<ul class="spec-production">
		<li><code class="name">binary</code> ⇒ '%' <code class="name">rfc_4648_base_64</code></li>
	</ul>
	<h4>Boolean</h4>
	<p>A <dfn>Boolean</dfn> is either of the tokens <code>true</code> or <code>false</code>.</p>
	<ul class="spec-production">
		<li><code class="name">boolean</code> ⇒ "false" | "true"</li>
	</ul>
	<h4>Character</h4>
	<p>A SURF <dfn>character</dfn> is a representation of a Unicode code point, delimited on both sides by the <code class="name">APOSTROPHE</code> character <code>'</code> (<code class="unicode">U+0027</code>). The backslash or <code class="name">REVERSE SOLIDUS</code> <code>\</code> (<code class="unicode">U+005C</code>) is used as as an escape character. The <code class="name">APOSTROPHE</code> , <code class="name">REVERSE SOLIDUS</code>, and control characters <span class="spec-must-not">must not</span> appear in a character unless they are escaped. The following escape sequences are allowed:</p>
	<dl>
		<dt><code>\\</code></dt>
		<dd><code class="name">REVERSE SOLIDUS</code> (<code class="unicode">U+005C</code>)</dd>
		<dt><code>\/</code></dt>
		<dd><code class="name">SOLIDUS</code> (<code class="unicode">U+002F</code>)</dd>
		<dt><code>\'</code></dt>
		<dd><code class="name">APOSTROPHE</code> (<code class="unicode">U+0027</code>)</dd>
		<dt><code>\b</code></dt>
		<dd><code class="name">BACKSPACE</code> (<code class="unicode">U+0008</code>)</dd>
		<dt><code>\f</code></dt>
		<dd><code class="name">FORM FEED (FF)</code> (<code class="unicode">U+000C</code>)</dd>
		<dt><code>\n</code></dt>
		<dd><code class="name">LINE FEED (LF)</code> (<code class="unicode">U+000A</code>)</dd>
		<dt><code>\r</code></dt>
		<dd><code class="name">CARRIAGE RETURN (CR)</code> (<code class="unicode">U+000D</code>)</dd>
		<dt><code>\t</code></dt>
		<dd><code class="name">CHARACTER TABULATION</code> (<code class="unicode">U+0009</code>)</dd>
		<dt><code>\v</code></dt>
		<dd><code class="name">LINE TABULATION</code> (<code class="unicode">U+000B</code>)</dd>
		<dt><code>\u<var>XXXX</var></code></dt>
		<dd>Any 16-bit Unicode code point encoding, where <var><code>XXXX</code></var> is four hexadecimal digits in any case. Escaped Unicode code points outside the Basic Multilingual Plane <span class="spec-must">must</span> be represented as two UTF-16 surrogate characters.</dd>
	</dl>
	<p>A SURF parser <span class="spec-must">must</span> correctly interpret characters outside the Basic Multilingual Plane, whether represented as a literal character or as an escaped Unicode code point.</p>
	<p> TODO production</p>
	<ul class="spec-production">
	</ul>
	<h4>Email Address</h4>
	<aside class="annotation far side">The caret delimiter indicating an email address resembles the paper airplane symbol representing <q>send email</q> in many user interfaces.</aside>
	<p>An email address in SURF begins with the <code class="name">CIRCUMFLEX ACCENT</code> character <code>^</code> (<code class="unicode">U+005E</code>) <span class="note">commonly known as a <q>caret</q></span>, followed by the <q>addr-spec</q> format specified in <a href="#ref-rfc5322" class="ref">RFC 5322</a>. The representation <span class="spec-must-not">must not</span> include any obsolete elements (those starting with the prefix <q>obs-</q>) in <cite>RFC 5322</cite>. The representation <span class="spec-must-not">must not</span> include any <q>comments</q> or <q>folding white space</q> as defined by <cite>RFC 5322</cite>.</p>
	<ul class="spec-production">
		<li><code class="name">email</code> ⇒ '^' <code class="name">rfc_5322_addr_spec</code></li>
	</ul>
	<h4>IRI</h4>
	<p>An <dfn>Internationalized Resource Identifiers</dfn> (<abbr>IRI</abbr>) is a sequence of Unicode characters for identifying a resource as defined in <a href="#ref-rfc3987" class="ref">RFC 3987</a>. In SURF an IRI is placed between a <code class="name">LESS-THAN SIGN</code> character <code>&lt;</code> (<code class="unicode">U+003C</code>) and a <code class="name">GREATER-THAN SIGN</code> character <code>&gt;</code> (<code class="unicode">U+003E</code>).</p>
	<ul class="spec-production">
		<li><code class="name">iri</code> ⇒ '&lt;' ( <code class="name">rfc_3987_IRI</code> | <code class="name">email</code> | <code class="name">telephone</code> | <code class="name">uuid</code> ) '&gt;'</li>
	</ul>
	<p> If an email address, telephone number, or UUID appears between the delimiters, it represents an <q>IRI short form</q> that is equivalent to a literal IRI according to the following rules:</p>
	<dl>
		<dt><code class="name">email</code></dt>
		<dd>The email address is converted into an IRI with a scheme of <code>mailto</code> according to <a href="#ref-rfc3987" class="ref">RFC 6068</a>.</dd>
		<dt><code class="name">telephone</code></dt>
		<dd>The telephone is converted into an IRI with a scheme of <code>tel</code> according to <a href="#ref-rfc3966" class="ref">RFC 3966</a>.</dd>
		<dt><code class="name">uuid</code></dt>
		<dd>The UUID is converted into a IRI with a scheme of <code>urn</code> and a URN namespace of <code>uuid</code> according to <a href="#ref-rfc4122" class="ref">RFC 4122</a>.</dd>
	</dl>
	<h4>Number</h4>
	<aside class="note far third">Non-decimal SURF numbers are identical to those of JSON, except that SURF allows leading zeros. <span class="see">See <a href="#ref-rfc7159" class="ref">RFC 7159</a>.</span></aside>
	<aside class="note far third">Examples of decimal types SURF processors <span class="spec-may">may</span> use include:
		<dl>
			<dt>C#</dt>
			<dd><a href="https://msdn.microsoft.com/en-us/library/364x0z75.aspx" class="see"><code>decimal</code></a></dd>
			<dt>Java</dt>
			<dd><a href="https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html" class="see"><code>java.math.BigDecimal</code></a></dd>
			<dt>Python</dt>
			<dd><a href="https://docs.python.org/3/library/decimal.html" class="see"><code>decimal</code></a></dd>
		</dl>
	</aside>
	<p>A <dfn>number</dfn> represents a numerical value in base 10 that <span class="spec-may">may</span> be negative and <span class="spec-may">may</span> be fractional. If the number begins with the <code class="name">DOLLAR SIGN</code> character <code>$</code> (<code class="unicode">U+0024</code>), it is considered a <dfn>decimal</dfn> and a SURF parser <span class="spec-must">must</span> represent the value using a construct that exactly represents the fractional part without rounding within the supported range.</p>
	<ul class="spec-production">
		<li><code class="name">number</code> ⇒ ['$'] ['-'] <code class="name">integer</code> [<code class="name">fraction</code>] [<code class="name">exponent</code>]</li>
		<li><code class="name">integer</code> ⇒ <code class="name">digit</code>+</li>
		<li><code class="name">fraction</code> ⇒ '.' <code class="name">digit</code>+</li>
		<li><code class="name">exponent</code> ⇒ ('e' | 'E') ['-' | '+'] <code class="name">digit</code>+</li>
		<li><code class="name">digit</code> ⇒ '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'</li>
	</ul>
	<p>A number <span class="spec-should">should</span> be in its canonical form:</p>
	<ul>
		<li>No leading zeros in the <code class="name">integer</code> component except to meet the requirement of at least one digit.</li>
		<li>No trailing zeros in the digit(s) in the <code class="name">fraction</code> component except to meet the requirement of at least one digit.</li>
		<li>o leading zeros in the digit(s) in the <code class="name">exponent</code> component.</li>
		<li>A lowercase <code>'e'</code> in the <code class="name">exponent</code> component.</li>
	</ul>
	<p>Nevertheless the presence of any leading zero(s) in the <code class="name">integer</code> component <span class="spec-must-not">shall not</span> be interpreted as indicating any other number base other than base 10.</p>
	<h4>Regular Expression</h4>
	<aside class="note far third">SURF regular expressions are syntactically identical to those defined in <cite>ECMAScript® 2016</cite>, except that SURF allows empty regular expressions. <span class="see">See <a href="http://www.ecma-international.org/ecma-262/7.0/#sec-literals-regular-expression-literals"><cite>ECMA-262 7<sup>th</sup> Edition: 11.8.5 Regular Expression Literals</cite></a>.</span></aside>
	<p>A <dfn>regular expression</dfn> is surrounded by slash or <code class="name">SOLIDUS</code> character <code>/</code> (<code class="unicode">U+002F</code>). The backslash or <code class="name">REVERSE SOLIDUS</code> <code>\</code> (<code class="unicode">U+005C</code>) is interpreted as as an escape character only if followed by a slash character <code>/</code>.</p>
	<p>TODO decide on whether and how to allow flags</p>
	<p>TODO production</p>
	<h4>String</h4>
	<aside class="note far third">Compare to <a href="#ref-rfc7159" class="ref">RFC 7159</a>.</aside>
	<p>A <dfn>string</dfn> represents a sequence of Unicode code points, delimited on both sides by the <code class="name">QUOTATION MARK</code> character <code>"</code> (<code class="unicode">U+0022</code>). The sequence of Unicode code points in a string <span class="spec-should">should</span> follow <code class="name">Normalization Form C</code> (<code>NFC</code>) as per <a href="#ref-uax15" class="ref">UAX #15</a>. The backslash or <code class="name">REVERSE SOLIDUS</code> <code>\</code> (<code class="unicode">U+005C</code>) is used as as an escape character. The <code class="name">QUOTATION MARK</code> , <code class="name">REVERSE SOLIDUS</code>, and control characters <span class="spec-must-not">must not</span> appear in a string unless they are escaped. The following escape sequences are allowed:</p>
	<dl>
		<dt><code>\\</code></dt>
		<dd><code class="name">REVERSE SOLIDUS</code> (<code class="unicode">U+005C</code>)</dd>
		<dt><code>\/</code></dt>
		<dd><code class="name">SOLIDUS</code> (<code class="unicode">U+002F</code>)</dd>
		<dt><code>\"</code></dt>
		<dd><code class="name">QUOTATION MARK</code> (<code class="unicode">U+0022</code>)</dd>
		<dt><code>\b</code></dt>
		<dd><code class="name">BACKSPACE</code> (<code class="unicode">U+0008</code>)</dd>
		<dt><code>\f</code></dt>
		<dd><code class="name">FORM FEED (FF)</code> (<code class="unicode">U+000C</code>)</dd>
		<dt><code>\n</code></dt>
		<dd><code class="name">LINE FEED (LF)</code> (<code class="unicode">U+000A</code>)</dd>
		<dt><code>\r</code></dt>
		<dd><code class="name">CARRIAGE RETURN (CR)</code> (<code class="unicode">U+000D</code>)</dd>
		<dt><code>\t</code></dt>
		<dd><code class="name">CHARACTER TABULATION</code> (<code class="unicode">U+0009</code>)</dd>
		<dt><code>\v</code></dt>
		<dd><code class="name">LINE TABULATION</code> (<code class="unicode">U+000B</code>)</dd>
		<dt><code>\u<var>XXXX</var></code></dt>
		<dd>Any 16-bit Unicode code point encoding, where <var><code>XXXX</code></var> is four hexadecimal digits in any case. Escaped Unicode code points outside the Basic Multilingual Plane <span class="spec-must">must</span> be represented as two UTF-16 surrogate characters.</dd>
	</dl>
	<p> TODO production</p>
	<h4>Telephone</h4>
	<aside class="annotation far half"><cite>RFC 3966</cite> allows visual separators as an aid to remembering URIs. SURF's focus is representing information and thus forgoes separators in the interest of simplicity.</aside>
	<p>In SURF the representation of a <dfn>telephone</dfn> number follows the <q>global number</q> format prescribed by <a href="#ref-rfc3966" class="ref">RFC 3966</a>, which is a <code class="name">PLUS SIGN</code> <code>+</code> (<code class="unicode">U+002B</code>) followed by at least one digit. The representation <span class="spec-must-not">must not</span> include any <q>visual separators</q> as defined by <cite>RFC 3966</cite>.</p>
	<figure class="far half">
		<figcaption>Example SURF telephone number.</figcaption>
		<ul>
			<li><code class="language-surf">+12015550123</code></li>
		</ul>
	</figure>
	<ul class="spec-production">
		<li><code class="name">telephone</code> ⇒ '+' <code class="name">digit</code>+</li>
	</ul>
	<h4>Temporal</h4>
	<aside class="note far third">Although JSON does not support dates, the SURF <code class="name">instant</code> format is compatible with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON" class="see"><code>JavaScript.Date.prototype.toJSON()</code></a>.</aside>
	<p>The SURF <dfn>temporal</dfn> representation encodes date and/or time information based on <a href="#ref-iso8601" class="ref">ISO 8601</a>. A temporal starts with the <code class="name">COMMERCIAL AT</code> character <code>@</code> (<code class="unicode">U+0040</code>). Time zone names <code class="name">tz</code> are from the IANA <a href="#ref-iso8601" class="ref">TZ</a> database and are case-sensitive. <span class="info">The format for <code>month_day</code> conforms to an older version of <a href="#ref-iso8601" class="ref">ISO 8601</a>; the most recent version does not mention a month+day format.</span> <span class="info">The format for <code>zoned_date_time</code> is an extension to the <a href="#ref-iso8601" class="ref">ISO 8601</a> specification.</span></p>
	<aside class="note">The format for <code class="name">zoned_date_time</code> is an extension to the <a href="#ref-iso8601" class="ref">ISO 8601</a> specification, and follows Java <a href="https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_ZONED_DATE_TIME" class="see"><code>java.time.format.DateTimeFormatter.ISO_ZONED_DATE_TIME</code></a>.</aside>
	<figure class="far half">
		<figcaption>Example SURF temporal values.</figcaption>
		<ul>
			<li><code class="language-surf">@2017-02-12T23:29:18.829Z</code></li>
			<li><code class="language-surf">@2017-02-12T15:29:18.829-08:00[America/Los_Angeles]</code></li>
			<li><code class="language-surf">@2017-02-12T15:29:18.829-08:00</code></li>
			<li><code class="language-surf">@2017-02-12-08:00</code></li>
			<li><code class="language-surf">@15:29:18.829-08:00</code></li>
			<li><code class="language-surf">@2017-02-12T15:29:18.829</code></li>
			<li><code class="language-surf">@2017-02-12</code></li>
			<li><code class="language-surf">@15:29:18.829</code></li>
			<li><code class="language-surf">@2017-02</code></li>
			<li><code class="language-surf">@--02-12</code></li>
			<li><code class="language-surf">@2017</code></li>
		</ul>
	</figure>
	<ul class="spec-production">
		<li><code class="name">temporal</code> ⇒ '@' (<code class="name">instant</code> | <code class="name">zoned_date_time</code> | <code class="name">offset_date_time</code> | <code class="name">offset_date</code> | <code class="name">offset_time</code> | <code class="name">local_date_time</code> | <code class="name">local_date</code> | <code class="name">local_time</code> | <code class="name">year_month</code> | <code class="name">month_day</code> | <code class="name">year</code>)</li>
		<li><code class="name">instant</code> ⇒ <code class="name">date</code> 'T' <code class="name">time</code> 'Z'</li>
		<li><code class="name">zoned_date_time</code> ⇒ <code class="name">offset_date_time</code> '[' <code class="name">tz</code> ']'</li>
		<li><code class="name">offset_date_time</code> ⇒ <code class="name">date</code> 'T' <code class="name">time</code> <code class="name">offset</code></li>
		<li><code class="name">offset_date</code> ⇒ <code class="name">date</code> <code class="name">offset</code></li>
		<li><code class="name">offset_time</code> ⇒ <code class="name">time</code> <code class="name">offset</code></li>
		<li><code class="name">local_date_time</code> ⇒ <code class="name">date</code> 'T' <code class="name">time</code><code class="name"></code></li>
		<li><code class="name">local_date</code> ⇒ <code class="name">date</code></li>
		<li><code class="name">local_time</code> ⇒ <code class="name">time</code></li>
		<li><code class="name">year_month</code> ⇒ <code class="name">YYYY</code> '-' <code class="name">MM</code><code class="name"></code></li>
		<li><code class="name">month_day</code> ⇒ '-' '-' <code class="name">MM</code> '-' <code class="name">DD</code><code class="name"></code></li>
		<li><code class="name">date</code> ⇒ <code class="name">YYYY</code> '-' <code class="name">MM</code> '-' <code class="name">DD</code></li>
		<li><code class="name">time</code> ⇒ <code class="name">hh</code> ':' <code class="name">mm</code> ':' <code class="name">ss</code> ['.' <code class="name">s</code>]</li>
		<li><code class="name">offset</code> ⇒ ('+' | '-') <code class="name">hh</code> ':' <code class="name">mm</code></li>
		<li><code class="name">YYYY</code> ⇒ <code class="name">digit</code> <code class="name">digit</code> <code class="name">digit</code> <code class="name">digit</code></li>
		<li><code class="name">MM</code> ⇒ <code class="name">digit</code> <code class="name">digit</code><code class="name"></code></li>
		<li><code class="name">DD</code> ⇒ <code class="name">digit</code> <code class="name">digit</code></li>
		<li><code class="name">hh</code> ⇒ <code class="name">digit</code> <code class="name">digit</code></li>
		<li><code class="name">mm</code> ⇒ <code class="name">digit</code> <code class="name">digit</code></li>
		<li><code class="name">ss</code> ⇒ <code class="name">digit</code> <code class="name">digit</code></li>
		<li><code class="name">s</code> ⇒ <code class="name">digit</code> <code class="name">digit</code> <code class="name">digit</code> [ <code class="name">digit</code> <code class="name">digit</code> <code class="name">digit</code> [ <code class="name">digit</code> <code class="name">digit</code> <code class="name">digit</code> ] ]</li>
	</ul>
	<p>TODO add support for durations</p>
	<h4>UUID</h4>
	<aside class="annotation far side">The ampersand character &amp; was chosen for UUIDs because it recalls the address-of operator of C/C++.</aside>
	<p>A <dfn>Universally Unique IDentifier</dfn> (<abbr>UUID</abbr>) <span class="spec-must">must</span> adhere to the requirements of <a href="#ref-rfc4122" class="ref">RFC 4122</a>. The SURF representation of a UUID be <span class="spec-must">must</span> be introduced by the <code class="name">AMPERSAND</code> character <code>&amp;</code> (<code class="unicode">U+0026</code>) and be followed by the <q>UUID</q> production given in <cite>RFC 4122</cite>.</p>
	<figure class="far half">
		<figcaption>Example SURF UUID.</figcaption>
		<ul>
			<li><code class="language-surf">&amp;f81d4fae-7dec-11d0-a765-00a0c91e6bf6</code></li>
		</ul>
	</figure>
	<ul class="spec-production">
		<li><code class="name">uuid</code> ⇒ '&amp;' <code class="name">hex</code>*8 '-' <code class="name">hex</code>*4 '-' <code class="name">hex</code>*4 '-' <code class="name">hex</code>*4 '-' <code class="name">hex</code>*12</li>
	</ul>
	<h3>Collections</h3>
	<p>Collection resources represent abstract data types that can hold other resources.</p>
	<h4>List</h4>
	<aside class="note far third">Examples of list types SURF processors <span class="spec-may">may</span> use include:
		<dl>
			<dt>C#</dt>
			<dd><a href="https://msdn.microsoft.com/en-us/library/6sh2ey19.aspx" class="see"><code>System.Collections.Generic.List&lt;T&gt;</code></a></dd>
			<dt>Java</dt>
			<dd><a href="https://docs.oracle.com/javase/8/docs/api/java/util/List.html" class="see"><code>java.util.List&lt;E&gt;</code></a></dd>
			<dt>JavaScript</dt>
			<dd><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" class="see"><code>Array</code></a></dd>
			<dt>Python</dt>
			<dd><a href="https://docs.python.org/3/library/stdtypes.html#list" class="see"><code>list</code></a></dd>
		</dl>
	</aside>
	<p>A SURF <dfn>list</dfn> is an <em>ordered</em> sequence of zero or more resources, beginning with a <code class="name">LEFT SQUARE BRACKET</code> character <code>[</code> (<code class="unicode">U+005B</code>) and ending with a <code class="name">RIGHT SQUARE BRACKET</code> character <code>]</code> (<code class="unicode">U+005D</code>). A SURF parser <span class="spec-should">should</span> represent a SURF list using an corresponding language construct that represents list semantics.</p>
	<ul class="spec-production">
		<li><code class="name">list</code> ⇒ '[' <code class="name">resource-sequence</code> ']'</li>
	</ul>
	<h4>Map</h4>
	<aside class="note far third">Examples of map types SURF processors <span class="spec-may">may</span> use include:
		<dl>
			<dt>C#</dt>
			<dd><a href="https://msdn.microsoft.com/en-us/library/xfhwa508.aspx" class="see"><code>System.Collections.Generic.Dictionary&lt;TKey, TValue&gt;</code></a></dd>
			<dt>Java</dt>
			<dd><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html" class="see"><code>java.util.Map&lt;K,V&gt;</code></a></dd>
			<dt>JavaScript</dt>
			<dd><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object" class="see"><code>Object</code></a></dd>
			<dt>Python</dt>
			<dd><a href="https://docs.python.org/3/library/stdtypes.html#dict" class="see"><code>dict</code></a></dd>
		</dl>
	</aside>
	<p>A SURF <dfn>map</dfn> is a sequence of associations between a key and a value. A map begins a <code class="name">LEFT CURLY BRACKET</code> character <code>{</code> (<code class="unicode">U+007B</code>) and ends with a <code class="name">RIGHT CURLY BRACKET</code> character <code>}</code> (<code class="unicode">U+007D</code>). Keys and values can be any resources. The key and value in each association or <dfn>entry</dfn> are separated by a <code class="name">COLON</code> character <code>:</code> (<code class="unicode">U+003A</code>).</p>
	<p>A map <span class="spec-should-not">should not</span> have entries with duplicate keys, and a SURF serializer <span class="spec-must-not">must not</span> produce a map with duplicate-key entries. A surf parser <span class="spec-must">must</span> ignore all but one of each entry with the same key. TODO revisit; this bring JSON compatibility, but could cause problems with labels if a duplicate entry is ignored</p>
	<p>A SURF parser <span class="spec-should">should</span> represent a SURF map using an corresponding language construct that represents map semantics.</p>
	<ul class="spec-production">
		<li><code class="name">map</code> ⇒ '{' <code class="name">entry-sequence</code> '}'</li>
		<li><code class="name">entry</code> ⇒ <code class="name">key</code> <code class="name">line_break</code>* ':' <code class="name">line_break</code>* <code class="name">value</code></li>
		<li><code class="name">key</code> ⇒ <code class="name">resource</code></li>
		<li><code class="name">value</code> ⇒ <code class="name">resource</code></li>
	</ul>
	<h4>Set</h4>
	<aside class="note far third">Examples of list types SURF processors <span class="spec-may">may</span> use include:
		<dl>
			<dt>C#</dt>
			<dd><a href="https://msdn.microsoft.com/en-us/library/bb359438.aspx" class="see"><code>System.Collections.Generic.HashSet&lt;T&gt;</code></a></dd>
			<dt>Java</dt>
			<dd><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Set.html" class="see"><code>java.util.Set&lt;E&gt;</code></a></dd>
			<dt>JavaScript</dt>
			<dd><a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Set" class="see"><code>Set</code></a></dd>
			<dt>Python</dt>
			<dd><a href="https://docs.python.org/3/library/stdtypes.html#set" class="see"><code>set</code></a></dd>
		</dl>
	</aside>
	<p>A <dfn>set</dfn> in SURF is an <em>unordered</em> sequence of zero or more resources, beginning with a <code class="name">LEFT PARENTHESIS</code> character <code>(</code> (<code class="unicode">U+0028</code>) and ending with a <code class="name">RIGHT PARENTHESIS</code> character <code>)</code> (<code class="unicode">U+0029</code>). The same resource <span class="spec-must-not">must not</span> appear more than once in a set. A SURF parser <span class="spec-should">should</span> represent a SURF set using an corresponding language construct that represents set semantics.</p>
	<ul class="spec-production">
		<li><code class="name">set</code> ⇒ '(' <code class="name">resource-sequence</code> ')'</li>
	</ul>
	<h4>Table</h4>
	<p>TODO</p>
	<h2>References</h2>
	<dl>
		<dt id="ref-iso8601" class="ref-target">ISO 8601:2004</dt>
		<dd><a href="https://www.iso.org/standard/40874.html"><cite>Data elements and interchange formats — Information interchange — Representation of dates and times, third edition, 2014-12-01</cite></a>. ISO.</dd>
		<dt id="ref-rfc2046" class="ref-target">RFC 2046</dt>
		<dd><a href="https://tools.ietf.org/html/rfc2046"><cite>Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types</cite></a>, N. Freed (Innosoft), N. Borenstein. IETF.</dd>
		<dt id="ref-rfc2119" class="ref-target">RFC 2119</dt>
		<dd><a href="https://tools.ietf.org/html/rfc2119"><cite>Key words for use in RFCs to Indicate Requirement Levels</cite></a>, S. Bradner (Harvard University). IETF.</dd>
		<dt id="ref-rfc3966" class="ref-target">RFC 3966</dt>
		<dd><a href="https://tools.ietf.org/html/rfc3966"><cite>The tel URI for Telephone Numbers</cite></a>, H. Schulzrinne (Columbia University). IETF.</dd>
		<dt id="ref-rfc3987" class="ref-target">RFC 3987</dt>
		<dd><a href="https://tools.ietf.org/html/rfc3987"><cite>Internationalized Resource Identifiers (IRIs)</cite></a>, M. Duerst (W3C), M. Suignard (Microsoft Corporation). IETF.</dd>
		<dt id="ref-rfc4122" class="ref-target">RFC 4122</dt>
		<dd><a href="https://tools.ietf.org/html/rfc4122"><cite>A Universally Unique IDentifier (UUID) URN Namespace</cite></a>, P. Leach (Microsoft Corporation), M. Mealling (Refactored Networks, LLC), R. Salz (DataPower Technology, Inc.). IETF.</dd>
		<dt id="ref-rfc4648" class="ref-target">RFC 4648</dt>
		<dd><a href="https://tools.ietf.org/html/rfc4648"><cite>The Base16, Base32, and Base64 Data Encodings</cite></a>, S. Josefsson (SJD). IETF.</dd>
		<dt id="ref-rfc5322" class="ref-target">RFC 5322</dt>
		<dd><a href="https://tools.ietf.org/html/rfc5322"><cite>Internet Message Format</cite></a>, P. Resnick, Ed. (Qualcomm Incorporated). IETF.</dd>
		<dt id="ref-rfc6068" class="ref-target">RFC 6068</dt>
		<dd><a href="https://tools.ietf.org/html/rfc6068"><cite>The 'mailto' URI Scheme</cite></a>, M. Duerst (Aoyama Gakuin University), L. Masinter (Adobe Systems Incorporated), J. Zawinski (DNA Lounge). IETF.</dd>
		<dt id="ref-rfc6657" class="ref-target">RFC 6657</dt>
		<dd><a href="https://tools.ietf.org/html/rfc6657"><cite>Update to MIME regarding "charset" Parameter Handling in Textual Media Types</cite></a>, A. Melnikov (Isode Limited), J. Reschke (greenbytes). IETF.</dd>
		<dt id="ref-rfc7159" class="ref-target">RFC 7159</dt>
		<dd><a href="https://tools.ietf.org/html/rfc7159"><cite id="ref-rfc7159">The JavaScript Object Notation (JSON) Data Interchange Format</cite></a>, T. Bray (Google, Inc.). IETF.</dd>
		<dt id="ref-tz" class="ref-target">TZ</dt>
		<dd><a href="https://www.iana.org/time-zones"><cite>Time Zone Database</cite></a>. IANA.</dd>
		<dt id="ref-uax15" class="ref-target">UAX #15</dt>
		<dd><a href="http://unicode.org/reports/tr15/"><cite>Unicode® Standard Annex #15: Unicode Normalization Forms</cite></a>, Mark Davis, Ken Whistler. The Unicode Consortium.</dd>
	</dl>
	<footer><small>Copyright © 2016–2017 GlobalMentor, Inc. All Rights Reserved. Content may not be published or reproduced by any means for any purpose without permission.</small></footer>
	<script src="../../pub/js/prism.js"></script>
</body>

</html>
