<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
  <head>
    <title>Uniform Resource Framework (URF)</title>
  </head>

  <body>
    <h1>Uniform Resource Framework (URF)</h1>

    <p>Copyright © 2007 GlobalMentor, Inc. This specification may be freely
    used but only in unmodifed form.</p>

    <p>Editor: Garret Wilson</p>

    <p>Version 2007-09-07</p>

    <p>The Uniform Resource Framework (URF) provides a consistent way for
    representing resources and their relationships. URF and its interchange
    formats are useful for data storage, data interchange, data querying, and
    logical inferences. URF together with its interchange formats provides a
    more powerful yet in many ways simpler and more consistent replacement for
    data-oriented XML, RDF, and JSON.</p>

    <p>This document defines the Uniform Resource Framework (URF) as an
    abstract model, and also defines a text-based representation format, Text
    URF (TURF). This document does not yet provide a description of the binary
    representation format Serial URF (SURF), or the XML-based format XML URF
    (XMURF).</p>

    <h2>Conventions</h2>

    <p>When this document refers to "URF", it indicates the URF model abstract
    from any representation format. When this document refers to "TURF", it
    indicates the textual representation of URF. Because abstract concepts
    must be textualized to be communicated in a text-based specification, at
    times a description of the URF abstract model will use TURF notation for
    clarification of the model.</p>

    <h2>Primer</h2>

    <h3>Resources</h3>

    <dl>
      <dt>URF</dt>

      <dd><p>Everything that can be described by URF is referred to as a
      <dfn>resource</dfn>. Every resource is an instance of the class
      <code>(&lt;:urf:#Resource»</code>.</p></dd>

      <dt>TURF</dt>

      <dd><p>A resource can be described by curly brackets. Multiple resources
      are separated by commas. The following example refers to an anonymous
      resource:</p><blockquote>
          <pre><code>{}</code></pre>
        </blockquote><p>A resource can optionally be given a label which can
      be used as a short representation to refer the resource only within the
      interchange document. A resource label is a series of <a
      href="#namechar">name characters</a> placed in front of a resource
      description and surrounded by colons, as in the following
      example:</p><blockquote>
          <pre><code>:label:{}</code></pre>
        </blockquote></dd>
    </dl>

    <h3>Resource Identification</h3>

    <dl>
      <dt>URF</dt>

      <dd><p>A resource may be <dfn>anonymous</dfn> or may be identified by
      one or more URIs.</p></dd>

      <dt>TURF</dt>

      <dd><p>A URI is indicated by angle brackets. The following example
      indicates the URI represented by the characters
      <code>http://example.org/example#resource</code>:</p><blockquote>
          <pre><code>&lt;http://example.org/example#resource&gt;</code></pre>
        </blockquote><p>A resource may be identified by placing its URI
      characters within angle quotes, in which the curly brackets are options
      if the resource has no properties. The following example refers to the
      resource identified by the URI
      <code>&lt;http://urf.name/urf#resource&gt;</code>.</p><blockquote>
          <pre><code>«http://example.org/example#resource»</code></pre>
        </blockquote><p>All URIs may be relative references, which are
      resolved to the base URI of the interchange document. URIs that have
      been given a label may also be used as a base reference against which
      the rest of the relative reference is resolved, by placing the base URI
      label at the beginning of the relative reference. The following example
      uses a labeled URI, defined in the first line, as a base URI in the
      second line to resolve into the same resource identified
      above:</p><blockquote>
          <pre><code>:example:&lt;http://example.org/example&gt;,
«:example:#resource»</code></pre>
        </blockquote></dd>
    </dl>

    <h3>Namespaces</h3>

    <dl>
      <dt>URF</dt>

      <dd><p>A set of resources (those part of a particular
      <dfn>ontology</dfn>, for example) may be grouped together for
      identification purposes by using a common <dfn>namespace</dfn>. A
      namespace is a URI that serves as a base for the formation of URIs
      within that namespace. If a resource lies within a namespace, the
      resource's <var>local name</var> is the part appearing after the pound
      sign in the URI fragment identifier. A namespace URI therefore may not
      have a fragment identifier. A URI within a namespace is formed by
      appending a pound sign followed by the resource's local name to the
      namespace URI. This allows the namespace and local name to be
      unambiguously determined given any URI within a namespace. For example,
      the URI <code>&lt;http://urf.name/urf#Resource&gt;</code> is within the
      namespace <code>&lt;http://urf.name/urf&gt;</code>. Not all resource
      URIs are part of some namespace.</p></dd>

      <dt>TURF</dt>

      <dd><p>TURF facilitates identification of a resource within a namespace
      using the URI resolution process described above. If
      <code>&lt;http://example.org/example&gt;</code> identifies a namespace
      and is given the label <code>example</code>, for example, the reference
      <code>(&lt;:example:#resource»</code> would indicate the same resource
      as would the reference
      <code>(&lt;http://example.org/example#resource»</code>.</p></dd>
    </dl>

    <p>This specification uses resources in the following namespaces, with
    corresponding labels:</p>

    <dl>
      <dt><code>:example:&lt;http://example.org/example&gt;</code></dt>

      <dd>An example namespace; used for hypothetical situations.</dd>

      <dt><code>:index:&lt;urn:urf:index&gt;</code></dt>

      <dd>The URF namespace for properties representing indexes of arrays and
      other resources.</dd>

      <dt><code>:urf:&lt;http://www.urf.name/urf&gt;</code></dt>

      <dd>The URF namespace for resource and properties related to the
      framework abstract model itself.</dd>
    </dl>

    <h3>Properties</h3>

    <dl>
      <dt>URF</dt>

      <dd><p>A resource may be related to another resource by the use of a
      <dfn>property</dfn>. Every property is itself a resource and is an
      instance of the class <code>«:urf:#Property»</code>. A resource
      <dfn>subject</dfn>, a property <dfn>predicate</dfn>, and the related
      resource <dfn>object</dfn> together make an <dfn>assertion</dfn> about
      the universe being described.</p><p>An infinite number of assertions may
      be made about a single subject resource. Repeated assertions about a
      subject resource with the same same predicate property and the same
      object resource are considered identical.</p></dd>

      <dt>TURF</dt>

      <dd><p>Assertions about a particular subject resource are presented
      within curly brackets and separated by commas. Each predicate property
      and object resource pair of an assertion are separated by an equals
      character. Object resources, like resources in other contexts, can serve
      as the subject of other property assertions. In the following example,
      the resource <code>«http://example.org/example#resource»</code> has a
      single property <code>(&lt;http://example.org/example#property»</code>,
      which has as its value another resource,
      <code>(&lt;http://example.org/example#value»</code>:</p><blockquote>
          <pre><code>«http://example.org/example#resource»
{
  «http://example.org/example#property»=«http://example.org/example#value»
}</code></pre>
        </blockquote><p>Were the label <code>example</code> defined to
      indicate the namespace <code>&lt;http://example.org/example&gt;</code>,
      the above example could be represented in the following shorthand
      representation:</p><blockquote>
          <pre><code>:example:&lt;http://example.org/example&gt;,
«:example:#resource»
{
  «:example:#property»=«:example:#value»
}</code></pre>
        </blockquote></dd>
    </dl>

    <h3>Classes</h3>

    <dl>
      <dt>URF</dt>

      <dd><p>A resource may represent a <dfn>class</dfn> or set of resources
      containing instances of other resources. As stated earlier, for example,
      all resources are implicitly instances of the class
      <code>«:urf:#Resource»</code>, and all property resources are also
      implicitly instances of the class <code>«:urf:#Property»</code>. Any
      resource may be explicitly asserted to be an instance of some class by
      identifying the class resource as a value of the
      <code>«:urf:#type»</code> property.</p></dd>

      <dt>TURF</dt>

      <dd><p>It can be asserted that a resource is an instance of a class by
      normal representation of the <code>«:urf:#type»</code> property. In the
      following example, the resource <code>«:example:#resource»</code> is
      asserted to be an instance of the class
      <code>«:example:#Class»</code>:</p><blockquote>
          <pre><code>:urf:&lt;http://www.urf.name/urf&gt;,
:example:&lt;http://example.org/example&gt;,
«:example:#resource»
{
  «:urf:#type»=«:example:#Class»,
  «:example:#property»=«:example:#value»
}</code></pre>
        </blockquote><p>As a shorthand representation, that a resource is an
      instance of one or more classes may be represented by placing the class
      resource after resource ference, surrounded by parentheses. Multiple
      classes may be separated by commas. The following example is
      semantically identical to the preceding example:</p><blockquote>
          <pre><code>:example:&lt;http://example.org/example&gt;,
«:example:#resource»(«:example:#Class»)
{
  «:example:#property»=«:example:#value»
}</code></pre>
        </blockquote></dd>
    </dl>

    <h3>URF Types</h3>

    <p>URF comes with several built-in types:</p>

    <dl>
      <dt><code>«:urf:#Array»</code></dt>

      <dd>Array resources are resources that contain other <dfn>element</dfn>
      resources at certain <dfn>indexes</dfn> of the array. An array, like
      normal resources, may have any property, but the properties representing
      the contents of the array lie in the <code>&lt;urn:urf:index&gt;</code>
      namespace, each with a local name of the canonical lexical form of the
      integer index of the element. That is, if an array contains an element
      at index 5, the element resource will appear as a value of the property
      <code>«urn:urf:index#5»</code>. Although many uses cases will prefer a
      continuous, unduplicated sequence of index properties beginning with
      <code>«urn:urf:index#0»</code>, this is not an URF requirement.</dd>

      <dt><code>«:urf:#Boolean»</code></dt>

      <dd>There are two boolean resources, the binary values <code>true</code>
      and <code>false</code>. Boolean resources are identified by lexical
      namespace URIs with lexical representations of <code>"true"</code> and
      <code>"false"</code>, respectively.</dd>

      <dt><code>«:urf:#Character»</code></dt>

      <dd>Character resources are the Unicode code points, and their lexical
      forms are the Unicode characters represented by those code points.</dd>

      <dt><code>«:urf:#Float»</code></dt>

      <dd>Float resources are floating point numbers, represented by lexical
      forms containing a period as a decimal separator and an optional
      exponent. (TODO further define format, including case of "e") (TODO
      refer to http://www.w3.org/TR/xmlschema-2/#float and
      http://www.w3.org/TR/xmlschema-2/#double)</dd>

      <dt><code>«:urf:#Integer»</code></dt>

      <dd>Integer resources are integer numbers, represented by roman digits
      with no decimal. (TODO refer to XMLSchema)</dd>

      <dt><code>«:urf:#Property»</code></dt>

      <dd>Every property is implicitly an instance of the class
      <code>urf:Property</code>.</dd>

      <dt><code>«:urf:#RegularExpression»</code></dt>

      <dd>Regular expression resources text-based patterns that define rules
      for the content of strings.</dd>

      <dt><code>«:urf:#Resource»</code></dt>

      <dd>Every resource is implicitly an instance of the class
      <code>urf:Resource</code>. The resources <code>urf:Property</code> and
      <code>urf:Resource</code> are both instances of the class
      <code>urf:Resource</code>.</dd>

      <dt><code>«:urf:#String»</code></dt>

      <dd>String resources are sequences of Unicode code points or text.</dd>

      <dt><code>«:urf:#Timestamp»</code></dt>

      <dd>Timestamp resources are particular points in time and have a lexical
      form defined in [<a href="#rfc3339">RFC 3339</a>].</dd>
    </dl>

    <h3>Lexical Namespaces</h3>

    <dl>
      <dt>URF</dt>

      <dd><p>Some resource types contain resource instances that in day-to-day
      life have customarily been identified by character sequences or
      <dfn><dfn>lexical representations</dfn></dfn>. For example, the integer
      <code>123</code> has historically been represented by the character
      sequence <code>"123"</code>, although the number itself is an abstract
      concept, not a series of characters. Similarly, the two boolean values
      are usually represented as the character sequences <code>"true"</code>
      and <code>"false"</code>. URF provides for a series of namespaces to
      identify resources that are typically identified by lexical
      representations. Each lexical namespace is a URN [<a href="#rfc2141">RFC
      2141</a>] with an NSS of <code>urf</code>, and have the following
      format,</p><blockquote>
          <pre><code>urn:urf:lex:<var>encodedTypeURI</var>#<var>encodedLexicalForm</var></code></pre>
        </blockquote><p>where <var>encodedTypeURI</var> is the URI-encoded
      form of the full type URI of the resource, and
      <var>encodedLexicalForm</var> is the URI-encoded canonical lexical form
      of the resource as defined by the indicated type. For example, the
      integer 123, which is of the type
      <code>«http://urf.name/urf#Integer»</code>, is represented in URF using
      the following URI:</p><blockquote>
          <pre><code>urn:urf:lex:http%3A%2F%2Furf.name%2Furf%23Integer#123</code></pre>
        </blockquote><p>A resource in a lexical namespace is implicitly an
      instance of the type indicated in the <var>encodedTypeURI</var> section
      of the URI. In all other aspects resources in lexical namespaces are no
      different from resources not in a lexical namespace; these resources are
      <em>not</em> instances of a special resource type solely because their
      namespaces are lexical namespaces. Lexical namespaces provide a
      framework for easily and consistently formulating identifying URIs for
      resources that are traditionally identified in lexical form; lexical
      namespaces in themselves imply no additional semantics.</p></dd>

      <dt>TURF</dt>

      <dd><p>Any representation of a resource in a lexical namespace also
      implicitly asserts the type of the resource. A resource in a lexical
      namespace can be identified by its URI as with any other resource.For
      example, the integer 123 can be identified by its URI
      <code>&lt;urn:urf:lex:http%3A%2F%2Furf.name%2Furf%23Integer#123&gt;</code>
      as in the following example:</p><blockquote>
          <pre><code>«urn:urf:lex:http%3A%2F%2Furf.name%2Furf%23Integer#123»</code></pre>
        </blockquote><p>Rather than indicating directly the URI of a resource
      in a lexical namespace, the resource may be identified by indicating the
      canonical lexical form of the resource, followed by the contents of the
      URI of the type of the resource. The integer 123 may therefore be
      represented in the following short form:</p><blockquote>
          <pre><code>«"123":urf:#Integer»</code></pre>
        </blockquote><p>The lexical namespaces for several types have
      additional short representations. The examples below assume that the
      label <code>urf</code> has been assigned to the URF namespace.</p><dl>
          <dt><code>«:urf:#Boolean»</code></dt>

          <dd><p>An boolean resource may be identified by its lexical form
          without surrounding quotes. For example, the following short
          representation,</p><blockquote>
              <pre><code>true</code></pre>
            </blockquote><p>is equivalent to the following long
          representation,</p><blockquote>
              <pre><code>«urn:urf:lex:http%3A%2F%2Furf.name%2Furf%23Boolean#true»</code></pre>
            </blockquote><p>which is also equivalent to the following general
          short representation for resources in a lexical
          namespace:</p><blockquote>
              <pre><code>«"true":urf:#Boolean»</code></pre>
            </blockquote></dd>

          <dt><code>«:urf:#Character»</code></dt>

          <dd><p>A character resource may be identified by its <a
          href="#charactershort">character-escaped lexical form</a> with
          surrounding single quotes. For example, the following short
          representation,</p><blockquote>
              <pre><code>'x'</code></pre>
            </blockquote><p>is equivalent to the following long
          representation,</p><blockquote>
              <pre><code>«urn:urf:lex:http%3A%2F%2Furf.name%2Furf%23Character#x»</code></pre>
            </blockquote><p>which is also equivalent to the following general
          short representation for resources in a lexical
          namespace:</p><blockquote>
              <pre><code>«"x":urf:#Character»</code></pre>
            </blockquote></dd>

          <dt><code>«:urf:#Timestamp»</code></dt>

          <dd><p>A timestamp resource may be identified by its [<a
          href="#rfc3339">RFC 3339</a>] lexical form with surrounding at signs
          (<code>'@'</code>). For example, the following short
          representation,</p><blockquote>
              <pre><code>@1996-12-19T16:39:57-08:00@</code></pre>
            </blockquote><p>is equivalent to the following long
          representation,</p><blockquote>
              <pre><code>«urn:urf:lex:http%3A%2F%2Furf.name%2Furf%23String#1996-12-19T16%3A39%3A57-08%3A00»</code></pre>
            </blockquote><p>which is also equivalent to the general short
          representation for resources in a lexical namespace:</p><blockquote>
              <pre><code>«"1996-12-19T16:39:57-08:00":urf:#Timestamp»</code></pre>
            </blockquote></dd>

          <dt><code>«:urf:#Float»</code></dt>

          <dd><p>A float resource may be identified by its lexical form
          without surrounding quotes. For example, the following short
          representation,</p><blockquote>
              <pre><code>123.0</code></pre>
            </blockquote><p>is equivalent to the following long
          representation,</p><blockquote>
              <pre><code>«urn:urf:lex:http%3A%2F%2Furf.name%2Furf%23Float#123.0»</code></pre>
            </blockquote><p>which is also equivalent to the following general
          short representation for resources in a lexical
          namespace:</p><blockquote>
              <pre><code>«"123.0":urf:#Float»</code></pre>
            </blockquote></dd>

          <dt><code>«:urf:#Integer»</code></dt>

          <dd><p>An integer resource may be identified by its lexical form
          without surrounding quotes. For example, the following short
          representation,</p><blockquote>
              <pre><code>123</code></pre>
            </blockquote><p>is equivalent to the following long
          representation,</p><blockquote>
              <pre><code>«urn:urf:lex:http%3A%2F%2Furf.name%2Furf%23Integer#123»</code></pre>
            </blockquote><p>which is also equivalent to the following general
          short representation for resources in a lexical
          namespace:</p><blockquote>
              <pre><code>«"123":urf:#Integer»»</code></pre>
            </blockquote></dd>

          <dt><code>«:urf:#RegularExpression»</code></dt>

          <dd><p>A regular expression resource may be identified by its <a
          href="#regexshort">regular expression-escaped lexical form</a>
          surrounded by slashes ('/'). For example, the following short
          representation,</p><blockquote>
              <pre><code>/a?b+c*/</code></pre>
            </blockquote><p>is equivalent to the following long
          representation,</p><blockquote>
              <pre><code>«urn:urf:lex:http%3A%2F%2Furf.name%2Furf%23RegularExpression#a%3Fb%2Bc*»</code></pre>
            </blockquote><p>which is also equivalent to the general short
          representation for resources in a lexical namespace:</p><blockquote>
              <pre><code>«"a?b+c*":urf:#RegularExpression»</code></pre>
            </blockquote></dd>

          <dt><code>«:urf:#String»</code></dt>

          <dd><p>A string resource may be identified by its <a
          href="#stringshort">string-escaped lexical form</a> with surrounding
          quotes. For example, the following short
          representation,</p><blockquote>
              <pre><code>"apple"</code></pre>
            </blockquote><p>is equivalent to the following long
          representation,</p><blockquote>
              <pre><code>«urn:urf:lex:http%3A%2F%2Furf.name%2Furf%23String#apple»</code></pre>
            </blockquote><p>which is also equivalent to the general short
          representation for resources in a lexical namespace:</p><blockquote>
              <pre><code>«"apple":urf:#String»</code></pre>
            </blockquote></dd>

          <dt><code>«:urf:#URI»</code></dt>

          <dd><p>A URI resource may be identified by its lexical form with
          surrounding angle brackets <code>'&lt;'</code> and
          <code>'&gt;'</code>. For example, the following short
          representation,</p><blockquote>
              <pre><code>&lt;http://urf.name/urf#type&gt;</code></pre>
            </blockquote><p>is equivalent to the following long
          representation,</p><blockquote>
              <pre><code>«urn:urf:lex:http%3A%2F%2Furf.name%2Furf%23URI#http%3A%2F%2Furf.name%2Furf%23type»</code></pre>
            </blockquote><p>which is also equivalent to the general short
          representation for resources in a lexical namespace:</p><blockquote>
              <pre><code>«"http://urf.name/urf#type":urf:#URI»</code></pre>
            </blockquote></dd>
        </dl></dd>
    </dl>

    <h3>Reification</h3>

    <dl>
      <dt>URF</dt>

      <dd><p>Propositions may be described without actually asserting those
      propositions. The sentence, "John believes that the sky is purple," for
      example, does not assert that the skye is purple, but merely that John
      believes this to be the case. The proposition "the sky is purple" may be
      described like any other resource, using the URF class
      <code>«:urf:#Proposition»</code> and the URF properties
      <code>«:urf:#subject»</code>, <code>«:urf:#predicate»</code>, and
      <code>«:urf:#object»</code>.</p></dd>

      <dt>TURF</dt>

      <dd><p>The following example asserts that John believes the sky to have
      the color purple without asserting that the sky actually has that
      color:</p><blockquote>
          <pre><code>:urf:&lt;http://www.urf.name/urf&gt;,
:example:&lt;http://example.org/example&gt;,
«:example:#john»
{
  «:example:#believes»=(«:urf:#Proposition»)
  {
    «:urf:#subject»=«:example:#sky»
    «:urf:#predicate»=«:example:#color»
    «:urf:#object»=«:example:#purple»
  }
}</code></pre>
        </blockquote></dd>
    </dl>

    <h3>Contextual Properties</h3>

    <dl>
      <dt>URF</dt>

      <dd><p>Some propositions should only be considered to be asserted in
      some context. For example, John may assert that the sky is purple, but
      only when the weather is stormy. The URF property «:urf:#context» allows
      any resource to be used to restrict a proposition to some context.
      Normally this context is itself a proposition. That is, John may assert
      the <dfn>contextual proposition</dfn> "the sky is purple", which has as
      its context the proposition, "the weather is stormy".</p><p>Some
      contextual properties have as a context another proposition asserted
      about the asserting subject; this is referred to as a <dfn>proper
      contextual proposition</dfn>. These propositions use the URF property
      <code>«:urf:#assert»</code> to indicate that the subject is asserting
      the proper contextual proposition. For example, if Juan has an English
      name of <code>"John"</code>, Juan could specify a
      <code>«:example:#name»</code> of <code>"John"</code> with an
      <code>«:example:#lang»</code> of
      <code>("en")^«:example:#Language»^</code>. Because the string
      <code>"John"</code> may not represent an English string in all contexts,
      its property <code>«:example:#lang»</code> should be considered
      contextual to the relationship between Juan and the
      <code>«:example:#name»</code> "John". The proposition Juan is asserting,
      "the string 'John' is in English", is contextual to the string "John"
      being the name of Juan.</p></dd>

      <dt>TURF</dt>

      <dd><p>The following example indicates that Juan has an English name of
      John:</p><blockquote>
          <pre><code>:urf:&lt;http://www.urf.name/urf&gt;,
:example:&lt;http://example.org/example&gt;,
«:example:#juan»
{
  «:example:#name»="John",
  «:example:#assert»=(«:urf:#Proposition»)
  {
    «:urf:#subject»="John",
    «:urf:#predicate»=«:example:#lang»,
    «:urf:#object»=("en")^«:example:#Language»^
    «:urf:#context»=(«:urf:#Proposition»)
    {
      «:urf:#subject»=«:example:#juan»,
      «:urf:#predicate»=«:example:#name»,
      «:urf:#object»="John"
    }
  }
}</code></pre>
        </blockquote><p>Proper contextual propositions may be presented in
      short form my using the character <code>'~'</code> in place of the
      character <code>'='</code> in a property definition. The following
      example illustrates the exact semantics as in the previous example: Juan
      indicates that "John" is English when used as his name.</p><blockquote>
          <pre><code>:example:&lt;http://example.org/example&gt;,
{
  «:example:#name»="John"
  {
    «:example:#lang»~«"en":example:#Language»
  }
}</code></pre>
        </blockquote></dd>
    </dl>

    <h3>Ordered Properties</h3>

    <dl>
      <dt>URF</dt>

      <dd>Although all subject resource property assertions have no inherent
      order, URF provides a facility for declaring property order using
      contextual properties. Each property that should be considered to have
      an order relative to other assertions of the same property is given a
      proper contextual property <code>«:urf:#order»</code> with a value of
      type <code>«:urf:#Integer»</code>, representing the relative order in
      which the property should be interpreted. The interpretation of the
      property's order is specific to the property in question. Although many
      uses cases will prefer a continuous, unduplicated sequence of order
      property values beginning with <code>0</code>, this is not an URF
      requirement.</dd>

      <dt>TURF</dt>

      <dd>Ordered properties may be indicated using the general representation
      for contextual properties. The following example indicates that a
      resource has two names, "William" and "Bill", and that "Will" comes
      before "Bill". (What it means that a name "comes before" another name
      depends on the definition of the name property being used. Perhaps one
      name comes before the other if used simultaneously, or perhaps one name
      has a higher priority or is considered the "default" name.) <blockquote>
          <pre><code>:urf:&lt;http://www.urf.name/urf&gt;,
:example:&lt;http://example.org/example&gt;,
{
  «:example:#name»="William"
  {
    «:urf:#order»~0
  },
  «:example:#name»="Bill"
  {
    «:urf:#order»~1
  }
}</code></pre>
        </blockquote>The same information may be presented in short
      representation in the form of a <dfn>sequence</dfn> by placing the
      ordered values within matching bar characters. A sequence does not
      result in a new type of value, but rather indicates that the given
      predicat should be asserted for each value, each with a contextual
      property of <code>«:urf:#order»</code> with values starting at
      <code>0</code> and continuing sequentially. The following example
      represents information semantically identical to the previous
      example:<blockquote>
          <pre><code>:urf:&lt;http://www.urf.name/urf&gt;,
:example:&lt;http://example.org/example&gt;,
{
  «:example:#name»=|"William",  "Bill"|
}</code></pre>
        </blockquote></dd>
    </dl>

    <h2>TURF</h2>

    <p>TURF is the text interchange format for URF. TURF emphasizes terseness
    and consistency while maintaining human readability, with a preference for
    using symbols from existing interchange formats such as JSON and
    programming languages such as Java and C#.</p>

    <h3>Grammar</h3>

    <p>The following grammar indicates literals in normal style, variables in
    emphasized text, and grammar symbols in strong text.</p>

    <p>Any two TURF tokens may be separated by break, whitespace, and
    separator Unicode characters.</p>

    <blockquote>
      <p><code><var>SEPARATOR</var> ⇒ Unicode Paragraph Separator
      <strong>|</strong> Unicode Segment Separator <strong>|</strong> Unicode
      Whitespace</code></p>
    </blockquote>

    <p>A TURF interchange document is encoded in UTF-8, and is composed of one
    or more resource descriptions, separated by commas.</p>

    <blockquote>
      <p><code><var>TURF</var> ⇒
      <var>resource</var><strong>[</strong>,<var>resource</var><strong>]*</strong></code></p>
    </blockquote>

    <p>Each resource description must have at least one of the following
    optional components: a label, a reference, a type, and a set of property
    definitions</p>

    <blockquote>
      <p><code><var>resource</var> ⇒
      <strong>[</strong>:<var>label</var>:<strong>][</strong><var>reference</var><strong>][</strong>^<var>type</var>^<strong>][</strong>{<var>properties</var>}<strong>]</strong></code></p>
    </blockquote>

    <p>A label consists of one or more name characters.</p>

    <blockquote>
      <p><code><var>label</var> ⇒
      <var>namechar</var><strong>+</strong></code></p>
    </blockquote>

    <p>A name character is any letter, digit, hyphen, or underscore.</p>

    <blockquote id="namechar">
      <p><code><var>namechar</var> ⇒ <var>Unicode Uppercase Letter</var>
      <strong>|</strong> <var>Unicode Lowercase Letter</var>
      <strong>|</strong> <var>Unicode Decimal Number</var> <strong>|</strong>
      - <strong>|</strong> _</code></p>
    </blockquote>

    <p>A resource reference is a URI reference or one of several short
    representations.</p>

    <blockquote>
      <p><code><var>reference</var> ⇒ <var>urireference</var>
      <strong>|</strong> <var>urishort</var> <strong>|</strong>
      <var>stringshort</var> <strong>|</strong> <var>booleanshort</var>
      <strong>|</strong> <var>integershort</var> <strong>|</strong>
      <var>floatshort</var> <strong>|</strong> <var>charactershort</var>
      <strong>|</strong> <var>arrayshort</var> <strong>|</strong>
      <var>sequenceshort</var> <strong>|</strong> <var>regexshort</var>
      <strong>|</strong> <var>timestampshort</var></code></p>
    </blockquote>

    <p>A resource URI reference is enclosed in angle quotes. The contents is
    either the text of a URI (or relative reference); the text of a URI
    preceded by the label of a base URI; or a string containing the lexical
    representation of a resource in a lexical namespace, immediately followed
    by the text of the URI of the type of the resource. Any URI reference that
    includes a lexical representation is equivalent to a URI reference in the
    form
    <code>«urn:urf:lex:<var>encodedTypeURI</var>#<var>encodedLexicalForm</var></code>».</p>

    <blockquote>
      <p><code><var>urireference</var> ⇒
      «<strong>[</strong><var>stringshort</var><strong>]</strong><strong>[</strong>:label:<strong>]</strong><var>urichar</var><strong>+</strong>»</code></p>
    </blockquote>

    <p>A string short form is a sequence of Unicode characters, using the
    backslash as an escape character, enclosed in double quotes. The double
    quotation mark (<code>'"'</code>), backslash (<code>'\\'</code>), and
    every Unicode control character must be escaped. Any Unicode code point
    may be represented by four uppercase or lowercase hexadecimal
    representation following the character sequence <code>"\u"</code>, or if
    the code point is not in the Basic Multilingual Plane, two such sequences
    representing UTF-16 surrogate pair. A string short form is equivalent to a
    resource of type <code>^«:urf:#String»^</code> using the corresponding
    lexical namespace. The string short form <code>"example"</code> is the
    equivalent of the string resource
    <code>("example")^«:urf:#String»^</code>.</p>

    <blockquote id="stringshort">
      <p><code><var>stringshort</var> ⇒ "<strong>[</strong><var>Unicode
      character except double quote, backslash, and control</var>
      <strong>|</strong> \" <strong>|</strong> \\ <strong>|</strong> \b
      <strong>|</strong> \t <strong>|</strong> \r <strong>|</strong> \n
      <strong>|</strong> \f <strong>|</strong>
      \u<var>XXXX</var><strong>]*</strong>"</code></p>
    </blockquote>

    <p>A character short form is a single Unicode characters, using the
    backslash as an escape character, enclosed in a single quote. The single
    quote (<code>'\''</code>), backslash (<code>'\\'</code>), and every
    Unicode control character must be escaped. Any Unicode code point may be
    represented by four uppercase or lowercase hexadecimal representation
    following the character sequence <code>"\u"</code>, or if the code point
    is not in the Basic Multilingual Plane, two such sequences representing
    UTF-16 surrogate pair. A string short form is equivalent to a resource of
    type <code>^«:urf:#Character»^</code> using the corresponding lexical
    namespace. The character short form <code>'x'</code> is the equivalent of
    the character resource <code>("x")^«:urf:#Character»^</code>.</p>

    <blockquote id="charactershort">
      <p><code><var>charactershort</var> ⇒ '<strong>[</strong><var>Unicode
      character except single quote, backslash, and control</var>
      <strong>|</strong> \' <strong>|</strong> \\ <strong>|</strong> \b
      <strong>|</strong> \t <strong>|</strong> \r <strong>|</strong> \n
      <strong>|</strong> \f <strong>|</strong>
      \u<var>XXXX</var><strong>]*</strong>'</code></p>
    </blockquote>

    <p>A URI short form is a sequence of character constituting a
    syntactically correct URI or a relative reference, surrounded by the angle
    brackets <code>'&lt;'</code> and <code>'&gt;'</code>. If a relative
    reference is provided, it is resolved against the base URi of the TURF
    document. If a label appears at the beginning of the URI characters and
    that label refers to a previously defined URI resource, the remaining
    characters are interpreted as a relative reference and resolved against
    the URI to which the label refers. A single relative reference is resolved
    to the base URI of the interchange document. A URI short form is
    equivalent to a resource of type <code>^«:urf:#URI»^</code> using the
    corresponding lexical namespace. The URI short form
    <code>&lt;http://example.org&gt;</code> is the equivalent of the URI
    resource <code>("http://example.org")^&lt;:urf:#URI»^</code>.</p>

    <blockquote>
      <p><code><var>urishort</var> ⇒
      &lt;<strong>[</strong>:<var>label</var>:<strong>]</strong><var>urichar</var><strong>+</strong>&gt;</code></p>
    </blockquote>

    <p>A boolean short form is the character sequence <code>true</code> or
    <code>false</code>. A boolean short form is equivalent to a resource of
    type <code>^«:urf:#Boolean»^</code> using the corresponding lexical
    namespace. The boolean short form <code>true</code> is the equivalent of
    the boolean resource <code>("true")^&lt;:urf:#Boolean»^</code>.</p>

    <blockquote>
      <p><code><var>booleanshort</var> ⇒
      true<strong>|</strong>false</code></p>
    </blockquote>

    <p>An integer short form consists of roman digits with no decimal. The
    integer short form <code>123</code> is the equivalent of the integer
    resource <code>("123")^«:urf:#Integer»^</code>.</p>

    <blockquote>
      <p><code><var>integershort</var> ⇒
      <strong>[</strong>-<strong>]</strong><var>romandigit</var><strong>*</strong></code></p>
    </blockquote>

    <p>A float short form consists of roman digits with a decimal with an
    optional exponent. The integer short form <code>123.50</code> is the
    equivalent of the integer resource
    <code>("123.50")^«:urf:#Float»^</code>.</p>

    <blockquote>
      <p><code><var>floatshort</var> ⇒
      <strong>[</strong>-<strong>]</strong><var>romandigit</var><strong>*[</strong>.<var>romandigit</var><strong>+][</strong>e<strong>|</strong>E<strong>[</strong>+<strong>|</strong>-<strong>]</strong><var>romandigit</var><strong>+]</strong></code></p>
    </blockquote>

    <p>A regular expression short form is a sequence of Unicode characters,
    using the backslash as an escape character, enclosed in forward slash
    (<code>'/'</code>) characters. The clash character (<code>'/'</code>),
    backslash (<code>'\\'</code>), and every Unicode control character must be
    escaped. Any Unicode code point may be represented by four uppercase or
    lowercase hexadecimal representation following the character sequence
    <code>"\u"</code>, or if the code point is not in the Basic Multilingual
    Plane, two such sequences representing UTF-16 surrogate pair. A regular
    expression short form is equivalent to a resource of type
    <code>^«:urf:#RegularExpression»^</code> using the corresponding lexical
    namespace. The regular expression short form <code>"a?b+c*"</code> is the
    equivalent of the string resource
    <code>("a?b+c*")^«:urf:#RegularExpression»^</code>.</p>

    <blockquote id="regexshort">
      <p><code><var>regexshort</var> ⇒ /<strong>[</strong><var>Unicode
      character except slash, backslash, and control</var> <strong>|</strong>
      \/ <strong>|</strong> \\ <strong>|</strong> \b <strong>|</strong> \t
      <strong>|</strong> \r <strong>|</strong> \n <strong>|</strong> \f
      <strong>|</strong> \u<var>XXXX</var><strong>]*</strong>/</code></p>
    </blockquote>

    <p>An array short form consists of a bracketed sequence of element
    resources separated by commas. Each listed element resource represents the
    value of an index property, in sequence beginning with
    <code>«urn:urf:index#0»</code>.</p>

    <blockquote>
      <p><code><var>arrayshort</var> ⇒
      [<strong>[</strong>resource<strong>[</strong>,resource<strong>]*]</strong>]</code></p>
    </blockquote>

    <p>A sequence short form consists of a sequence of element resources
    separated by commas and surrounded by the bar character <code>'|'</code>.
    Each listed element resource indicates another assertion of the given
    predicate with the given element resource as the value, each with a
    contextual property of <code>«:urf:#order»</code> with values starting at
    <code>0</code> and continuing sequentially.</p>

    <blockquote>
      <p><code><var>sequenceshort</var> ⇒
      |<strong>[</strong>resource<strong>[</strong>,resource<strong>]*]</strong>|</code></p>
    </blockquote>

    <p>Type consists of zero or more resource specifications between matching
    <code>'^'</code> characters, each indicating a type of the resource.
    Indicating a type in this manner is equivalent to indicating the type as
    the value of a <code>«:urf:#type»</code> property.</p>

    <blockquote>
      <p><code><var>type</var> ⇒
      ^<strong>[</strong><var>resource</var><strong>[,</strong><var>resource</var><strong><strong>]*</strong>]</strong>^</code></p>
    </blockquote>

    <p>Properties consist of a comma-separated list of predicate resource and
    object resource pairs. Within each of these pairs, the separator
    <code>'='</code> is used to denote normal properties, and the separator
    <code>'~'</code> is used to denote contextual properties in the context of
    the property's subject resource and its respective predicate resource and
    subject resource.</p>

    <blockquote>
      <p><code><var>properties</var> ⇒
      <strong>[</strong><var>property</var><strong>[,</strong><var>property</var><strong><strong>]*</strong>]</strong></code></p>
    </blockquote>

    <blockquote>
      <p><code><var>property</var> ⇒
      <var>resource</var><strong>(</strong>=<strong>|</strong>~<strong>)</strong><var>resource</var></code></p>
    </blockquote>

    <h2>Examples</h2>

    <h3>VCard</h3>

    <p>The VCard [<a href="#rfc2426">RFC 2426</a>] example,</p>

    <blockquote>
      <pre><code>N:Stevenson;John;Philip,Paul;Dr.;Jr.,M.D.,A.C.P.</code></pre>
    </blockquote>

    <p>can be represented in the following URF formulation:</p>

    <blockquote>
      <pre><code>:urf:&lt;http://urf.name/urf&gt;,
:vcard:&lt;http://urf.com/vcard&gt;,
{
  «:vcard:#n»=(«:vcard:#Name»)
  {
    «:vcard:#familyName»="Stevenson",
    «:vcard:#givenName»="John",
    «:vcard:#additionalName»=|"Philip", "Paul"|,
    «:vcard:#honoraryPrefix»="Dr.",
    «:vcard:#honorarySuffix»=|"Jr.", "M.D.", "A.C.P."|
  }
}</code></pre>
    </blockquote>

    <h2>Comparisons</h2>

    <h3>Differences between URF and JSON</h3>

    <p></p>

    <ul>
      <li>Any URF resource may be identified by a URI. JSON makes no provision
      for identifying resources.</li>

      <li>URF allows globally consistent semantic properties by identifying
      resources with URIs. JSON properties names are local and may clash with
      semantically distinct property names among resources.</li>

      <li>URF provides a system for grouping resources within a common
      namespace, with the management of control for those namespaces
      facilitated by the Internet domain name system. JSON properties cannot
      be so aportioned, making name clashes more likely.</li>

      <li>URF distinguishes between the number types
      <code>«http://urf.name/urf#Integer»</code> and
      <code>«http://urf.name/urf#Float»</code>. JSON only has one number
      type.</li>

      <li>URF has a character type,
      <code>«http://urf.name/urf#Character»</code>. JSON has no character
      type.</li>

      <li>URF has a timestamp type,
      <code>«http://urf.name/urf#Timestamp»</code>. JSON has no date or time
      type.</li>
    </ul>

    <h3>Differences between URF and RDF</h3>

    <p>URF is a semantic superset of RDF. Anything that can be represented by
    the RDF abstract syntax can be represented by the URF abstract model.
    Converting from URF to RDF is possible but would require special
    URF-related RDF ontologies to encapsulate the extra semantics built into
    the URF abstract model.</p>

    <ul>
      <li>URF considers all resources equal, providing for consistent
      identification and property designation of every resource. RDF considers
      certain resources, such as numbers and strings, to be of special
      <dfn>literal</dfn> resource types which are not identified by URIs (in
      contrast to all other non-literal resources) and to which properties
      cannot be given.</li>

      <li>URF provides a facility for declaring the order of properties. RDF
      has no such facility.</li>

      <li>URF provides for contextual properties. RDF has no such
      concept.</li>

      <li>URF has a character type,
      <code>«http://urf.name/urf#Character»</code>. RDF, which uses XML Schema
      data types (TODO cite), has no character type.</li>

      <li>URF has a regular expression type,
      <code>«http://urf.name/urf#RegularExpression»</code>. RDF has no regular
      expression type.</li>
    </ul>

    <h3>Differences between URF and XML</h3>

    <p></p>

    <ul>
      <li>URF provides a single type of subrelation: properties. XML provides
      two types of subrelations: attributes and child elements.</li>

      <li>URF uses global URIs to identify nodes in a graph. XML uses string
      IDs local to the defining document.</li>
    </ul>

    <h3>Differences between TURF and RDF/XML</h3>

    <p></p>

    <ul>
      <li>TURF allows any resource, including strings and other resources in
      lexical namespaces, to be labeled for later reference. RDF/XML does not
      allow so-called RDF literal resources to be labeled.</li>

      <li>TURF allows any resource to appear in a its ordered type, the array.
      RDF/XML does not allow so-called RDF literal resources to appear in its
      ordered type, the list.</li>
    </ul>

    <h2>References</h2>

    <p></p>

    <dl>
      <dt id="rfc2141">IETF RFC 2141</dt>

      <dd>R. Moats. <a href="http://www.ietf.org/rfc/rfc2141.txt"><cite>RFC
      2141: URN Syntax</cite></a>. Internet Engineering Task Force, 1997.</dd>

      <dt id="rfc2426">IETF RFC 2426</dt>

      <dd>F. Dawson and T. Howes. <a
      href="http://www.ietf.org/rfc/rfc2426.txt"><cite>RFC 2426: vCard MIME
      Directory Profile</cite></a>. Internet Engineering Task Force,
      1998.</dd>

      <dt id="rfc3339">IETF RFC 3339</dt>

      <dd>G. Klyne and C. Newman. <a
      href="http://www.ietf.org/rfc/rfc3339.txt"><cite>RFC 3339: Date and Time
      on the Internet: Timestamps</cite></a>. Internet Engineering Task Force,
      2002.</dd>
    </dl>

    <h2>History</h2>

    <p></p>
  </body>
</html>